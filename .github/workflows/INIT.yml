name: INIT
on:
  workflow_dispatch:
    inputs:
      level:
        description: Logging Level
        required: true
        default: INFO
        type: choice
        options:
          - CRITICAL
          - FATAL
          - ERROR
          - WARNING
          - WARN
          - INFO
          - DEBUG
          - NOTSET
      args:
        description: args
        required: false
      users:
        description: users (space separated)
        required: false
      password:
        description: password (space separated)
        required: false
      ssfn:
        description: ssfn (space separated)
        required: false
      shared_secret:
        description: 2fa (space separated - MUST match users order)
        required: false
      update:
        description: update
        type: boolean
        required: false
        default: false
      update_users:
        description: update_users
        required: false
    branches:
      - main
concurrency:
  group: wait
  cancel-in-progress: false
jobs:
  init:
    runs-on: windows-latest
    env:
      KEY: ${{ secrets.KEY }}
      users: ${{ github.event.inputs.users }}
      password: ${{ github.event.inputs.password }}
      ssfn: ${{ github.event.inputs.ssfn }}
      shared_secret: ${{ github.event.inputs.shared_secret }}
      UsersJson: ${{ secrets.UsersJson }}
      TwoFactorJson: ${{ secrets.TwoFactorJson }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - run: |
          git config --local user.name AutoUpdate[bot]
          git config --local user.email AutoUpdate[bot]@users.noreply.github.com
      - if: ${{ env.KEY != '' }}
        run: python main.py -l ${{ github.event.inputs.level || 'INFO' }} -i -k ${{ secrets.KEY }} -P ${{ github.event.inputs.args }}
      - if: ${{ env.KEY == '' }}
        run: python main.py -l ${{ github.event.inputs.level || 'INFO' }} -i ${{ github.event.inputs.args }}
      - if: ${{ env.users != '' }}
        name: Update users and re-enable disabled accounts
        run: |
           python -c "
           import os
           import json
           import itertools
           from pathlib import Path
           
           # Create files if they don't exist
           Path('data/users.json').touch()
           Path('data/userinfo.json').touch()
           
           # Load existing data safely
           try:
               with open('data/users.json') as f:
                   j = json.load(f) if f.read().strip() else {}
           except:
               j = {}
           
           try:
               with open('data/userinfo.json') as f:
                   us = json.load(f) if f.read().strip() else {}
           except:
               us = {}
           
           # Process users (FIXED: consistent space splitting)
           users_list = [i or None for i in (os.environ.get('users') or '').split(' ')]
           password_list = [i or None for i in (os.environ.get('password') or '').split(' ')]
           ssfn_list = [i or None for i in (os.environ.get('ssfn') or '').split(' ')]
           
           for u, p, s in itertools.zip_longest(users_list, password_list, ssfn_list):
               if u:
                   print(f'Processing user: {u}')
                   
                   # Re-enable disabled accounts with different credentials
                   if u in j and u in us and not us[u].get('enable', True):
                       if j[u][0] != p or j[u][1] != s:
                           us[u]['enable'] = True
                           us[u].pop('status', None)
                           print(f'Re-enabled account: {u}')
                   
                   # Update credentials
                   j[u] = [p, s]
                   
                   # Ensure userinfo exists
                   if u not in us:
                       us[u] = {'app': [], 'update': 0, 'enable': True}
           
           # Save files
           with open('data/userinfo.json', 'w') as f:
               json.dump(us, f, indent=2)
           with open('data/users.json', 'w') as f:
               json.dump(j, f, indent=2)
           
           print('Users updated successfully')
           "
      - if: ${{ env.shared_secret != '' }}
        name: Update 2FA secrets with validation
        run: |
           python -c "
           import os
           import json
           import itertools
           import base64
           from pathlib import Path
           
           # Create file if it doesn't exist
           Path('data/2fa.json').touch()
           
           # Load existing 2FA data safely
           try:
               with open('data/2fa.json') as f:
                   content = f.read().strip()
                   j = json.loads(content) if content else {}
           except:
               j = {}
           
           # FIXED: Use space splitting to match users input
           users_list = [i or None for i in (os.environ.get('users') or '').split(' ')]
           secret_list = [i or None for i in (os.environ.get('shared_secret') or '').split(' ')]
           
           print(f'Processing {len(users_list)} users and {len(secret_list)} secrets')
           
           # Validate and update 2FA secrets
           for u, secret in itertools.zip_longest(users_list, secret_list):
               if u and secret:
                   print(f'Processing 2FA for user: {u}')
                   
                   # Basic validation - check if it's valid base64
                   try:
                       decoded = base64.b64decode(secret)
                       if len(decoded) >= 10:  # Reasonable length check
                           j[u] = secret
                           print(f'✅ 2FA secret added for {u}')
                       else:
                           print(f'❌ 2FA secret too short for {u}')
                   except Exception as e:
                       print(f'❌ Invalid 2FA secret for {u}: {e}')
               elif u:
                   print(f'⚠️  No 2FA secret provided for {u}')
           
           # Save 2FA file
           with open('data/2fa.json', 'w') as f:
               json.dump(j, f, indent=2)
           
           print('2FA secrets updated successfully')
           "
      - if: ${{ env.UsersJson != '' }}
        run: python -c "import os;import json;j=json.load(open('data/users.json'));j.update(json.loads(os.environ.get('UsersJson') or '{}'));json.dump(j,open('data/users.json','w'));"
      - if: ${{ env.TwoFactorJson != '' }}
        run: python -c "import os;import json;j=json.load(open('data/2fa.json'));j.update(json.loads(os.environ.get('TwoFactorJson') or '{}'));json.dump(j,open('data/2fa.json','w'));"
      - if: ${{ github.event.inputs.update }}
        run: python main.py -l ${{ github.event.inputs.level || 'INFO' }} -k ${{ secrets.KEY }} -t 1 -u -P ${{ github.event.inputs.update_users != '' && format('-U {0}', github.event.inputs.update_users) || '' }} ${{ github.event.inputs.args }}
      - if: ${{ env.users != '' || env.shared_secret != '' || env.UsersJson != '' || env.TwoFactorJson != '' || github.event.inputs.update }}
        run: python push.py
